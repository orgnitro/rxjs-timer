{"version":3,"sources":["components/TimerScreen.js","components/StartStopBtn.js","components/WaitBtn.js","components/ResetBtn.js","components/appReducer.js","App.js","index.js"],"names":["TimerScreen","props","style","color","fontWeight","textAlign","hours","minutes","seconds","StartBtn","handler","className","onClick","WaitBtn","ResetBtn","appReducer","state","action","type","hourInt","Math","floor","payload","minInt","secInt","time","sec","min","isRunning","timerSource","next","value","timerIsRunning","counterVal","waitBtnClicked","setTimeout","initialState","Subject","App","useReducer","dispatch","useEffect","pipe","startWith","scan","acc","val","tap","current","switchMap","interval","NEVER","subscribe","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2038843a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport default function TimerScreen(props) {\r\n  const screenStyle = {\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n    textAlign: 'center'\r\n  }\r\n  return (\r\n    <div style={screenStyle}>\r\n      {props.hours}:{props.minutes}:{props.seconds}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\n\r\nexport default function StartBtn({ handler }) {\r\n\r\n  return (\r\n    <button className=\"start-stop-btn\" onClick={handler}>Start/Stop</button>\r\n  )\r\n}","import React from 'react'\r\n\r\n\r\nexport default function WaitBtn({ handler }) {\r\n\r\n  return (\r\n    <button className=\"wait-btn\" onClick={handler}>Wait</button>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\n\r\nexport default function ResetBtn({ handler }) {\r\n  return (\r\n    <button className=\"reset-btn\" onClick={handler}>Reset</button>\r\n  )\r\n}\r\n","import { timerSource } from '../App'\r\n \r\n\r\nconst appReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"SET_TIME\": {\r\n      const hourInt = Math.floor(action.payload / (60*60));\r\n      const minInt = Math.floor(action.payload / 60);\r\n      const secInt = action.payload % 60;\r\n\r\n      return {\r\n        ...state,\r\n        time: {\r\n          sec: (secInt < 10) ? `0${secInt}` : secInt,\r\n          min: (minInt < 10) ? `0${minInt}` : minInt,\r\n          hours: (hourInt < 10) ? `0${hourInt}` : hourInt,\r\n        }\r\n      }\r\n    }\r\n    case \"START/STOP_HANDLER\": {\r\n      if (state.isRunning) {\r\n        timerSource.next({value: 0, timerIsRunning: false});\r\n        return {\r\n          ...state, \r\n          isRunning: false,\r\n          counterVal: 0\r\n        }\r\n      } else {\r\n        timerSource.next({timerIsRunning: true});\r\n        return {...state, isRunning: true}\r\n      }\r\n    }\r\n    case \"WAIT_HANDLER\": {\r\n      if (state.waitBtnClicked) {\r\n        timerSource.next({timerIsRunning: false});\r\n        return {...state, isRunning: false}\r\n      } else {\r\n        setTimeout( () => {\r\n          return {...state, waitBtnClicked: false} \r\n        }, 300);\r\n        return {...state, waitBtnClicked: true}\r\n      }\r\n    }\r\n    case \"WAIT_HANDLER_NOT_DBCLICKED\":\r\n      return {...state, waitBtnClicked: false}\r\n    case \"RESET_HANDLER\": {\r\n      timerSource.next({value: 0});\r\n      return {...state, counterVal: 0}\r\n    }\r\n    default: \r\n      return state;\r\n  }\r\n}\r\n\r\nexport default appReducer","import React, { useEffect, useReducer, } from 'react'\r\nimport { Subject, interval, NEVER } from 'rxjs'\r\nimport { switchMap, scan, startWith, tap } from 'rxjs/operators'\r\nimport './App.css'\r\n\r\nimport TimerScreen from './components/TimerScreen'\r\nimport StartStopBtn from './components/StartStopBtn'\r\nimport WaitBtn from './components/WaitBtn'\r\nimport ResetBtn from './components/ResetBtn'\r\nimport appReducer from './components/appReducer'\r\n\r\n\r\nconst initialState = {\r\n  time: {sec: '00', min: '00', hours: '00'},\r\n  counterVal: 0,\r\n  isRunning: false,\r\n  waitBtnClicked: false\r\n}\r\n\r\nexport const timerSource = new Subject();\r\n\r\nconst App = () => {\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n\r\n  useEffect( () => {\r\n    timerSource.pipe(\r\n      startWith({ value: 0, timerIsRunning: false }),\r\n      scan( (acc, val) => ({ ...acc, ...val })),\r\n      tap( current => {\r\n        dispatch({\r\n          type: \"SET_TIME\",\r\n          payload: current.value\r\n        });\r\n      }),\r\n        switchMap( current => !current.timerIsRunning ? NEVER : interval(1000).pipe(\r\n          tap( () => {\r\n            current.value += 1;\r\n            dispatch({\r\n              type: \"SET_TIME\",\r\n              payload: current.value\r\n            });\r\n          })\r\n        ))\r\n      ).subscribe();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <TimerScreen \r\n        hours={state.time.hours}\r\n        minutes={state.time.min}\r\n        seconds={state.time.sec}\r\n      />\r\n      <StartStopBtn handler={() => dispatch({type: \"START/STOP_HANDLER\"})} />\r\n      <WaitBtn handler={() => {\r\n        dispatch({type: \"WAIT_HANDLER\"});\r\n        setTimeout(() => {dispatch({type: \"WAIT_HANDLER_NOT_DBCLICKED\"})}, 300)\r\n        }} \r\n      />\r\n      <ResetBtn handler={() => dispatch({type: \"RESET_HANDLER\"})} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}